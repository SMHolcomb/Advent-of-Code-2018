"""
************************************************************************************************
PART I:
The whole piece of fabric they're working on is a very large square - at least 1000 inches on each side.

Each Elf has made a claim about which area of fabric would be ideal for Santa's suit. All claims 
have an ID and consist of a single rectangle with edges parallel to the edges of the fabric. Each 
claim's rectangle is defined as follows:

The number of inches between the left edge of the fabric and the left edge of the rectangle.
The number of inches between the top edge of the fabric and the top edge of the rectangle.
The width of the rectangle in inches.
The height of the rectangle in inches.
A claim like #123 @ 3,2: 5x4 means that claim ID 123 specifies a rectangle 3 inches from the 
left edge, 2 inches from the top edge, 5 inches wide, and 4 inches tall. Visually, it claims 
the square inches of fabric represented by # (and ignores the square inches of fabric 
represented by .) in the diagram below:

...........
...........
...#####...
...#####...
...#####...
...#####...
...........
...........
...........
The problem is that many of the claims overlap, causing two or more claims to cover part of the 
same areas. For example, consider the following claims:

#1 @ 1,3: 4x4
#2 @ 3,1: 4x4
#3 @ 5,5: 2x2
Visually, these claim the following areas:

........
...2222.
...2222.
.11XX22.
.11XX22.
.111133.
.111133.
........
The four square inches marked with X are claimed by both 1 and 2. (Claim 3, while adjacent to 
the others, does not overlap either of them.)

If the Elves all proceed with their own plans, none of them will have enough fabric. 
How many square inches of fabric are within two or more claims?

--- Part Two ---
Amidst the chaos, you notice that exactly one claim doesn't overlap by even a single square inch of 
fabric with any other claim. If you can somehow draw attention to it, maybe the Elves will be able to 
make Santa's suit after all!

For example, in the claims above, only claim 3 is intact after all claims are made.

What is the ID of the only claim that doesn't overlap?


************************************************************************************************

Completed: 12/3/18

************************************************************************************************
"""

def init_matrix(fabric, maxwide):

	fabric = [[0 for i in range(maxwide+1)] for j in range(maxwide+1)]
	claim_map  = [[0 for i in range(maxwide+1)] for j in range(maxwide+1)]

	return fabric, claim_map

	
def claim_matrix(fabric, claim_map, claims):
	
	for claim in claims:
		for i in range(claim[2],claim[2]+claim[4]):
			for j in range(claim[1],claim[1]+claim[3]):
				fabric[i][j]+=1

				# update the claim map
				if claim_map[i][j] != 0:
					claim_map[i][j] = 0
				
				else:
					claim_map[i][j] = claim[0]

	return fabric


def final_count(overlap,fabric):

	for i in range(0,len(fabric)):
		for j in range(0,len(fabric[i])):
			if fabric[i][j]>1:
				overlap+=1

	return overlap



def check_claims(claim_map, claim_size):
	claim_id = -1
	temp_frequency = {}
	for i in range(0, len(claim_size)):
		temp_frequency[i+1] = 0
	
	# loop through claim_map and if there is a claim_id there, add 1 to count in temp_frequency
	for i in range(0,len(claim_map)):
		for j in range(0,len(claim_map[i])):
			if claim_map[i][j] > 0:
				temp_frequency[claim_map[i][j]]+=1

	# now compare claim_size and temp_frequency  counts for each claim id to find the 1 that matches
	for claim in claim_size:
		if temp_frequency.get(claim) == claim_size.get(claim):
			return claim
	
	return 0


def main():
	
	claims = []
	fabric = []
	claim_map = []
	claim_size = {}

	maxwide = 0
	overlap = 0

	# PART I and PART II
	
	with open('day03_input.txt','r') as input_file:
	#with open('day03_testinput.txt','r') as input_file:
		for claimid in input_file:
			#must be a better way to clean this up!
			claimid = claimid.replace("@ ","")
			claimid = claimid.replace(":","")
			claimid = claimid.rstrip('\r\n')
			claimid = claimid.translate(str.maketrans({'#':'','x': ' ', ',': ' '}))
			claimid = claimid.split(' ')
			claimid = list(map(int, claimid))	
			
			claims.append(claimid)
			claim_size[claimid[0]] = claimid[3] * claimid[4]

			# get max width/height to create matrix
			maxwide = max(claimid[1] + claimid[3],claimid[2] + claimid[4],maxwide)
		

		# create fabric matrix for math and claim_map for Part II
		fabric, claim_map = init_matrix(fabric, maxwide)
		

		#add the claims to the fabric matrix and claim_map
		fabric = claim_matrix(fabric, claim_map, claims)
		
		#count overlaps
		overlap = final_count(overlap, fabric)
		print("overlap:", overlap)	

		# PART II:
		# check final claim_map against original claims to 
		# find claim that is intact
		intact_claim = check_claims(claim_map, claim_size)
		if intact_claim == 0:
			print("No intact claim found")
		else:
			print("Intact Claim ID:", intact_claim)

# PART II

if __name__ == '__main__':
	main()
